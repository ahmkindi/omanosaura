// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: products.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deleteProductReview = `-- name: DeleteProductReview :exec
DELETE FROM reviews WHERE product_id = $1 AND user_id = $2
`

type DeleteProductReviewParams struct {
	ProductID uuid.UUID `json:"product_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteProductReview(ctx context.Context, arg DeleteProductReviewParams) error {
	_, err := q.db.ExecContext(ctx, deleteProductReview, arg.ProductID, arg.UserID)
	return err
}

const dislikeProduct = `-- name: DislikeProduct :exec
DELETE FROM likes WHERE product_id = $1 AND user_id = $2
`

type DislikeProductParams struct {
	ProductID uuid.UUID `json:"product_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) DislikeProduct(ctx context.Context, arg DislikeProductParams) error {
	_, err := q.db.ExecContext(ctx, dislikeProduct, arg.ProductID, arg.UserID)
	return err
}

const likeProduct = `-- name: LikeProduct :exec
INSERT INTO likes(product_id, user_id, created_at)
VALUES ($1, $2, CURRENT_DATE) ON CONFLICT (product_id, user_id) DO NOTHING
`

type LikeProductParams struct {
	ProductID uuid.UUID `json:"product_id"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) LikeProduct(ctx context.Context, arg LikeProductParams) error {
	_, err := q.db.ExecContext(ctx, likeProduct, arg.ProductID, arg.UserID)
	return err
}

const reviewProduct = `-- name: ReviewProduct :exec
INSERT INTO reviews(product_id, user_id, review, last_updated)
VALUES ($1, $2, $3, CURRENT_DATE) ON CONFLICT (product_id, user_id)
DO UPDATE SET
  review = excluded.review,
  last_updated = excluded.last_updated
`

type ReviewProductParams struct {
	ProductID uuid.UUID `json:"product_id"`
	UserID    uuid.UUID `json:"user_id"`
	Review    string    `json:"review"`
}

func (q *Queries) ReviewProduct(ctx context.Context, arg ReviewProductParams) error {
	_, err := q.db.ExecContext(ctx, reviewProduct, arg.ProductID, arg.UserID, arg.Review)
	return err
}
