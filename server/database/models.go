// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package database

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ProductKind string

const (
	ProductKindSchool ProductKind = "school"
	ProductKindTeam   ProductKind = "team"
	ProductKindExp    ProductKind = "exp"
)

func (e *ProductKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductKind(s)
	case string:
		*e = ProductKind(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductKind: %T", src)
	}
	return nil
}

type UserRole string

const (
	UserRoleNone   UserRole = "none"
	UserRoleAdmin  UserRole = "admin"
	UserRoleWriter UserRole = "writer"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type AvailableProduct struct {
	ID              string      `json:"id"`
	Title           string      `json:"title"`
	TitleAr         string      `json:"title_ar"`
	Subtitle        string      `json:"subtitle"`
	SubtitleAr      string      `json:"subtitle_ar"`
	Description     string      `json:"description"`
	DescriptionAr   string      `json:"description_ar"`
	Photo           string      `json:"photo"`
	BasePriceBaisa  int64       `json:"base_price_baisa"`
	PlannedDates    []time.Time `json:"planned_dates"`
	Photos          []string    `json:"photos"`
	Longitude       float64     `json:"longitude"`
	Latitude        float64     `json:"latitude"`
	LastUpdated     time.Time   `json:"last_updated"`
	IsDeleted       bool        `json:"is_deleted"`
	ExtraPriceBaisa int64       `json:"extra_price_baisa"`
	Kind            ProductKind `json:"kind"`
	PricePer        int32       `json:"price_per"`
}

type Blog struct {
	ID            string    `json:"id"`
	Title         string    `json:"title"`
	Description   string    `json:"description"`
	TitleAr       string    `json:"title_ar"`
	DescriptionAr string    `json:"description_ar"`
	Photo         string    `json:"photo"`
	Page          string    `json:"page"`
	PageAr        string    `json:"page_ar"`
	UserID        string    `json:"user_id"`
	CreatedAt     time.Time `json:"created_at"`
}

type Product struct {
	ID              string      `json:"id"`
	Title           string      `json:"title"`
	TitleAr         string      `json:"title_ar"`
	Subtitle        string      `json:"subtitle"`
	SubtitleAr      string      `json:"subtitle_ar"`
	Description     string      `json:"description"`
	DescriptionAr   string      `json:"description_ar"`
	Photo           string      `json:"photo"`
	BasePriceBaisa  int64       `json:"base_price_baisa"`
	PlannedDates    []time.Time `json:"planned_dates"`
	Photos          []string    `json:"photos"`
	Longitude       float64     `json:"longitude"`
	Latitude        float64     `json:"latitude"`
	LastUpdated     time.Time   `json:"last_updated"`
	IsDeleted       bool        `json:"is_deleted"`
	ExtraPriceBaisa int64       `json:"extra_price_baisa"`
	Kind            ProductKind `json:"kind"`
	PricePer        int32       `json:"price_per"`
}

type Purchase struct {
	ID                uuid.UUID `json:"id"`
	ProductID         string    `json:"product_id"`
	UserID            string    `json:"user_id"`
	NumOfParticipants int32     `json:"num_of_participants"`
	Paid              bool      `json:"paid"`
	CostBaisa         int64     `json:"cost_baisa"`
	ChosenDate        time.Time `json:"chosen_date"`
	Complete          bool      `json:"complete"`
	CreatedAt         time.Time `json:"created_at"`
	ExtraPriceChosen  bool      `json:"extra_price_chosen"`
}

type Review struct {
	ProductID   string    `json:"product_id"`
	UserID      string    `json:"user_id"`
	Rating      float64   `json:"rating"`
	Title       string    `json:"title"`
	Review      string    `json:"review"`
	LastUpdated time.Time `json:"last_updated"`
}

type User struct {
	ID    string   `json:"id"`
	Email string   `json:"email"`
	Name  string   `json:"name"`
	Phone string   `json:"phone"`
	Role  UserRole `json:"role"`
}

type UserCustomerID struct {
	UserID     string `json:"user_id"`
	CustomerID string `json:"customer_id"`
}
