// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getUser = `-- name: GetUser :one
SELECT id, email, phone, role, name FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.Name,
	)
	return i, err
}

const getUserCustomerId = `-- name: GetUserCustomerId :one
SELECT customer_id FROM user_customer_id WHERE user_id = $1
`

func (q *Queries) GetUserCustomerId(ctx context.Context, userID uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getUserCustomerId, userID)
	var customer_id string
	err := row.Scan(&customer_id)
	return customer_id, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users(id, email, name, phone, role)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (id) DO NOTHING
`

type InsertUserParams struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
	Name  string    `json:"name"`
	Phone string    `json:"phone"`
	Role  UserRole  `json:"role"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Phone,
		arg.Role,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = $1, phone = $2
`

type UpdateUserParams struct {
	Name  string `json:"name"`
	Phone string `json:"phone"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Name, arg.Phone)
	return err
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE users SET role = $1
`

func (q *Queries) UpdateUserRole(ctx context.Context, role UserRole) error {
	_, err := q.db.Exec(ctx, updateUserRole, role)
	return err
}
