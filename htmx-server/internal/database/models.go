// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ProductKind string

const (
	ProductKindSchool ProductKind = "school"
	ProductKindTeam   ProductKind = "team"
	ProductKindExp    ProductKind = "exp"
)

func (e *ProductKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductKind(s)
	case string:
		*e = ProductKind(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductKind: %T", src)
	}
	return nil
}

type NullProductKind struct {
	ProductKind ProductKind `json:"product_kind"`
	Valid       bool        `json:"valid"` // Valid is true if ProductKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductKind) Scan(value interface{}) error {
	if value == nil {
		ns.ProductKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductKind), nil
}

type UserRole string

const (
	UserRoleNone   UserRole = "none"
	UserRoleAdmin  UserRole = "admin"
	UserRoleWriter UserRole = "writer"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type AvailableProduct struct {
	ID              string        `json:"id"`
	Title           string        `json:"title"`
	TitleAr         string        `json:"title_ar"`
	Subtitle        string        `json:"subtitle"`
	SubtitleAr      string        `json:"subtitle_ar"`
	Description     string        `json:"description"`
	DescriptionAr   string        `json:"description_ar"`
	Photo           string        `json:"photo"`
	BasePriceBaisa  int64         `json:"base_price_baisa"`
	PlannedDates    []pgtype.Date `json:"planned_dates"`
	Photos          []string      `json:"photos"`
	Longitude       float64       `json:"longitude"`
	Latitude        float64       `json:"latitude"`
	LastUpdated     pgtype.Date   `json:"last_updated"`
	IsDeleted       bool          `json:"is_deleted"`
	ExtraPriceBaisa int64         `json:"extra_price_baisa"`
	Kind            ProductKind   `json:"kind"`
	PricePer        int32         `json:"price_per"`
}

type Blog struct {
	ID            string      `json:"id"`
	Title         string      `json:"title"`
	Description   string      `json:"description"`
	TitleAr       string      `json:"title_ar"`
	DescriptionAr string      `json:"description_ar"`
	Photo         string      `json:"photo"`
	Page          string      `json:"page"`
	PageAr        string      `json:"page_ar"`
	UserID        string      `json:"user_id"`
	CreatedAt     pgtype.Date `json:"created_at"`
}

type Product struct {
	ID              string        `json:"id"`
	Title           string        `json:"title"`
	TitleAr         string        `json:"title_ar"`
	Subtitle        string        `json:"subtitle"`
	SubtitleAr      string        `json:"subtitle_ar"`
	Description     string        `json:"description"`
	DescriptionAr   string        `json:"description_ar"`
	Photo           string        `json:"photo"`
	BasePriceBaisa  int64         `json:"base_price_baisa"`
	PlannedDates    []pgtype.Date `json:"planned_dates"`
	Photos          []string      `json:"photos"`
	Longitude       float64       `json:"longitude"`
	Latitude        float64       `json:"latitude"`
	LastUpdated     pgtype.Date   `json:"last_updated"`
	IsDeleted       bool          `json:"is_deleted"`
	ExtraPriceBaisa int64         `json:"extra_price_baisa"`
	Kind            ProductKind   `json:"kind"`
	PricePer        int32         `json:"price_per"`
}

type Purchase struct {
	ID                pgtype.UUID `json:"id"`
	ProductID         string      `json:"product_id"`
	UserID            string      `json:"user_id"`
	NumOfParticipants int32       `json:"num_of_participants"`
	Paid              bool        `json:"paid"`
	CostBaisa         int64       `json:"cost_baisa"`
	ChosenDate        pgtype.Date `json:"chosen_date"`
	Complete          bool        `json:"complete"`
	CreatedAt         pgtype.Date `json:"created_at"`
	ExtraPriceChosen  bool        `json:"extra_price_chosen"`
}

type Review struct {
	ProductID   string      `json:"product_id"`
	UserID      string      `json:"user_id"`
	Rating      float64     `json:"rating"`
	Title       string      `json:"title"`
	Review      string      `json:"review"`
	LastUpdated pgtype.Date `json:"last_updated"`
}

type User struct {
	ID    string   `json:"id"`
	Email string   `json:"email"`
	Name  string   `json:"name"`
	Phone string   `json:"phone"`
	Role  UserRole `json:"role"`
}

type UserCustomerID struct {
	UserID     string `json:"user_id"`
	CustomerID string `json:"customer_id"`
}
